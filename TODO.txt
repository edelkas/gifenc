- Allow to work in 2 modes: palette mode and canvas mode. Palette mode you work
  with the color indices directly (with helpers), and canvas mode you work with
  the colors and then eventually the palette needs to be created based on those
  colors (either by finding the best possible palette, or by fitting the image
  in whatever palette was specified, perhaps with a given tolerance).
- Multiple palette operations: Union (merge), intersection, difference...
- When modifying the color table, we should probably have a flag that enables a
  trigger to update the canvas with the new color indices, to maintain the image,
  if that's what's desired (we may've changed the palette deliberately to
  change the theme of the GIF of swap colors, for instance)
- Add a hash map for the colors of a color table, for the sake of performance,
  which we update every time we modify the palette, or whenever we call a certain
  "update" method. In fact, let the user choose between these 2 policies. Moreover,
  have a member of the ColorTable class, "auto_update", that is true by default,
  that updates this inverted hash after every modification.
- Methods to modify the palette: darken, lighten (in fact, interpolate with respect
  to any color), grayscale, quantization, color shifting, etc.
- Add default color tables (e.g. web-safe, grayscale, etc)
- Implement interlacing
- Drawing: Bucket tool
- Drawing: Grid, geometric shapes (e.g. ellipses), patterns (like in Excel)...
- Polar coordinates, parameterized curves, etc.
- In the bound checks for line/rect we're not taking the width into consideration
- Enforce that we either have a GCT or every frame has an LCT, or at least, have
  a warning when that is done, and a hard switch that is needed to enable not having
  any tables, for those that really know what they're doing (mention this in the
  docs)
- Should we send indices or colors to Image.get, Image.set, Image.[], Image.[]= ???
- What happens when an image is placed at least partially out of bounds with respect
  to the logical screen? Does it get cropped, is the GIF corrupt? Perhaps we should
  either raise an exception here or crop the image, or let the user choose between
  these two policies.
- What happens if some frames have GCE and some don't?
- Should the transparency index appear when the transparency bit is not set?
- Add Rake tests
- Add exception handling to most functions
- Add logging (log, warn, err, lex...)
- The depth parameter has to do with the GIF, not with the color table, move it
  and adapt the docs and everything else
- If the GIF has multiple images but no GCE, decoders appear to animate them
  by default with the default delay of 10
- Decoder: When we finish parsing a block, and we stumble upon a byte that we
  dont' recognize (it's not the label of any recognizable block), keep parsing
  until we find one that we do, and try to continue from there. If it fails,
  consider that padding and give out warning.
- Rename "trans_color": transparent, trans...?
- If a color is used which is not in the palette, unexpected results may ensue.
  This includes the trans_color, which means we should assign a valid palette color
  whenever we want to use transparency, which means we should reserve one slot in
  the palette for that.
- When we finish the README, add links to the different sections in the First Example.
- Write up a Wiki on Github.
- Add constant to specify whether transparency should be used by default. Perhaps
  the default value in trans_color should then be something else (e.g. -1), which
  means to use the default, whereas nil means to disable it. Alternatively, use
  another variable, "transparency", whose default value is this constant.
- Perhaps make general Gifenc class variables (using @@) so that those defaults
  can be configured at runtime with getters and setters (e.g. default color).
- Add a Canvas class, that takes care of actual pixel manipulations, which can
  have either color indices or actual colors. Then, Image would inherit (or sub-
  class) Canvas, but we could use Canvas with raw colors and then convert to an
  Image by fitting a Color Table.
- Perhaps even have 2 classes, one that implements the stuff that works for both
  palette mode and color mode, such as drawing, and another that only works in
  actual color mode, such as darkening colors. The first class would probably
  inherit from the second one.
- Dithering
- Layered image support
- Arbitrary quantizators (e.g. you can specify bit-depth for each channel, such
  as 3, 3, 2), and then shortcuts for common ones.
- Color spaces (sRGB, linear, etc)
- Have a bounding box attribute for an image that updates automatically every time
  we draw something on it. At the end, after operating with the image, this should
  contain the bounding box of everything that's been drawn, so that it can be
  automatically cropped and offsetted in the logical screen with a function
  before calling encode. This should all be optional of course.
- Improve structure of the TODO
- Add a GIF report method, to print all relevant info for a decoded GIF
- The GIF's default color currently doesn't do anything, it's not true that it's
  the image's default color because we construct them completely independently.
- Add comparison functions: Compare 2 images, and 2 GIFs. Useful for determining
  whether 2 GIFs, potentially encoded differently (with color tables in other order,
  different LZW settings, etc) have the same exact frames. Perhaps even quantify
  difference.